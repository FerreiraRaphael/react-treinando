'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _notification = require('./notification');

var _notification2 = _interopRequireDefault(_notification);

/**
 * The notification list does not have any state, so use a
 * pure function here. It just needs to return the stacked array
 * of notification components.
 */

var StackedNotification = (function (_Component) {
  _inherits(StackedNotification, _Component);

  function StackedNotification() {
    _classCallCheck(this, StackedNotification);

    _Component.call(this);

    this.state = {
      isActive: false
    };

    this.handleDismiss = this.handleDismiss.bind(this);
  }

  StackedNotification.prototype.componentDidMount = function componentDidMount() {
    setTimeout(this.setState.bind(this, {
      isActive: true
    }), 1);

    setTimeout(this.setState.bind(this, {
      isActive: false
    }), this.props.dismissAfter);
  };

  StackedNotification.prototype.handleDismiss = function handleDismiss() {
    return this.setState({
      isActive: false
    });
  };

  StackedNotification.prototype.render = function render() {
    return _react2['default'].createElement(_notification2['default'], _extends({}, this.props, {
      action: false,
      isActive: this.state.isActive
    }));
  };

  return StackedNotification;
})(_react.Component);

;

StackedNotification.propTypes = {};

exports['default'] = StackedNotification;
module.exports = exports['default'];
